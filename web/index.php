<?php
use FormulaParser\FormulaParser;
require('../vendor/autoload.php');
$con = pg_connect(getenv("DATABASE_URL"));
$app = new Silex\Application();
$app['debug'] = true;

// Register the monolog logging service
$app->register(new Silex\Provider\MonologServiceProvider(), array(
  'monolog.logfile' => 'php://stderr',
));

// Our web handlers
$lang = array(
  'ru-en', // 1
  'en-ru', // 2
  'fr-ru', // 3
  'ru-fr' // 4
);
$app->get('/', function() use($app) {
return "—Ç–∞–≥–∏—Ä –¥–µ–±–∏–ª";
});
$app->post('/bot', function() use($app) {
  $data = json_decode(file_get_contents('php://input'));

  if(!$data)
    return "nioh";
  
  if( $data->secret !== getenv('VK_SECRET_TOKEN') && $data->type !== 'confirmation')
    return 'nioh';

  switch($data->type){
    case 'confirmation':
      return getenv('VK_CONFIRMATION_CODE');
      break;
      
 /*   case "wall_post_new":
      $request_params = array(
        'domain' => "gitpush",
        'access_token' => '18d28ce6782d1c964c4bac21f4fd054378c65e739089d1bcae856947b32657436f5c2d06faa5179289e08',
        'v' => '5.80',
        'message' => '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å'
      );
      file_get_contents('https://api.vk.com/method/messages.send?' . http_build_query($request_params));
      return 'ok';

      break; */
    case 'message_new':
      $request_params = array(
        'peer_id' => "{$data->object->peer_id}",
        'access_token' => '18d28ce6782d1c964c4bac21f4fd054378c65e739089d1bcae856947b32657436f5c2d06faa5179289e08',
        'v' => '5.80'
      );
      
      $split = explode(" ", $data->object->text, 2);

      if ( $split[0] == '–ö—É' || $split[0] == '–∫—É' || $split[0] == '!–ø—Ä–∏–≤–µ—Ç' || $split[0] == '!–ü—Ä–∏–≤–µ—Ç'){
        $request_params["message"] = 'üéâ–ü—Ä–∏–≤–µ—Ç–∏–∫üéâ';
      } 

      /* elseif ( $split[0] == '!–¥–∑' ){
        $request_params['message'] = $data->object->fwd_messages['id'];
      } */
      
      elseif ( $split[0] == "!—Å–∫–∞–∂–∏" ){
          $request_params['message'] = $split[1];
      }
      
      elseif ( $split[0] == '!—Ä–µ—à–∏' ){
            $formula = $split[1];
            $precision = 2; // Number of digits after the decimal point

            $parser = new FormulaParser($formula, $precision);
            $result = $parser->getResult(); // [0 => 'done', 1 => 16.38]
            $request_params['message'] = "üçÄ–û—Ç–≤–µ—Ç: " . number_format($result[1], $precision, '.', ',');
      }

      elseif ( $split[0] == "!–ø–µ—Ä–µ–≤–æ–¥" ){
        $split2 = explode(" ", $split[1], 2);
        $request_params['message'] = json_decode(file_get_contents('https://translate.yandex.net/api/v1.5/tr.json/translate?' . http_build_query(array(
          'key' => "trnsl.1.1.20181124T122415Z.1606631df5f130cf.d1a65715f0dd3d20cedfa225a1442f4d7ecc2082",
          'text' => $split2[1],
          'lang' => $lang[$split2[0]-1]
        ))), true)['text'][0];
    }

      elseif ( $split[0] == '!–∞–Ω–µ–∫–¥–æ—Ç' ){
          $anekdots = array(
            '–ö–æ–ª–æ–±–æ–∫ –ø–æ–≤–µ—Å–∏–ª—Å—è',
            'php –Ω–æ—Ä–º —è–∑—ã–∫',
            '–í–∞—Å—è –ø–æ—à—ë–ª –∫–æ–¥–∏—Ç—å –Ω–∞ —Ñ–ª–µ—à',
            '–ù–∞–¥–µ–ª –º—É–∂–∏–∫ —à–ª—è–ø—É, –∞ –æ–Ω–∞ –µ–º—É –∫–∞–∫ —Ä–∞–∑üò≥üò≥üò≥',
            '–ì–¥–µ –∫–æ–º–º–∏—Ç –ª–µ–±–æ–≤—Å–∫–∏?'
            );
          $rand = $anekdots[rand(0, count($anekdots)-1)];
          $request_params['message'] = $rand;
          $request_params['attachment'] = 'photo-170236279_456239020';
      }
      
      /* elseif ( $split[0] == '!–±–¥'){
        $query = pg_query($con, "INSERT INTO messages (user_id, message) VALUES (22112, '–ø—Ä–∏–≤');");
        $request_params['message'] = 'gg';
      } */
      elseif ( $split[0] == '!–ø–æ–º–æ—â—å' ) {
        $request_params['message'] = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!<br> –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:<br>;-P !–ø—Ä–∏–≤–µ—Ç - –±–æ—Ç —Å–∫–∞–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Çüòú<br>üëè!—Å–∫–∞–∂–∏ <—Ñ—Ä–∞–∑–∞/—Ç–µ–∫—Å—Ç> - –±–æ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç —Ç–≤–æ—é —Ñ—Ä–∞–∑—Éüëè<br>üòé!—Ä–µ—à–∏ <–ø—Ä–∏–º–µ—Ä> - –±–æ—Ç —Ä–µ—à–∏—Ç –ø—Ä–∏–º–µ—Ä –∑–∞ —Ç–µ–±—èüòé<br>üòÉ!–∞–Ω–µ–∫–¥–æ—Ç - –±–æ—Ç —Ä–∞—Å—Å–∫–∞–∂–µ—Ç —Å–º–µ—à–Ω–æ–π –∞–Ω–µ–∫–¥–æ—ÇüòÉ';
      }

      file_get_contents('https://api.vk.com/method/messages.send?' . http_build_query($request_params));
      return 'ok';

      break;
  }
  return "nioh";
});

$app->run();